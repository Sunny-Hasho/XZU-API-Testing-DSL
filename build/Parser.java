
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Oct 26 23:26:36 IST 2025
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.*;
import java.util.*;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Oct 26 23:26:36 IST 2025
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\006\000\002\003\002\000\002\004\007" +
    "\000\002\004\004\000\002\004\002\000\002\020\007\000" +
    "\002\020\007\000\002\005\004\000\002\005\002\000\002" +
    "\012\007\000\002\013\003\000\002\013\003\000\002\006" +
    "\004\000\002\006\003\000\002\016\007\000\002\007\004" +
    "\000\002\007\003\000\002\014\003\000\002\014\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\011\005\000\002\011\002\000\002\010" +
    "\004\000\002\010\002\000\002\015\003\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\021\007\000" +
    "\002\021\011\000\002\021\007\000\002\021\010\000\002" +
    "\021\010\000\002\021\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\012\002\ufffd\004\004\007\ufffd\010\ufffd\001" +
    "\002\000\004\024\125\001\002\000\004\002\124\001\002" +
    "\000\010\002\ufff6\007\ufff6\010\ufff6\001\002\000\010\002" +
    "\uffff\007\010\010\012\001\002\000\004\027\116\001\002" +
    "\000\010\002\ufff7\007\ufff7\010\ufff7\001\002\000\004\027" +
    "\016\001\002\000\006\002\000\010\012\001\002\000\006" +
    "\002\ufff1\010\ufff1\001\002\000\006\002\ufff2\010\ufff2\001" +
    "\002\000\004\024\017\001\002\000\014\011\027\012\026" +
    "\013\020\014\024\015\023\001\002\000\004\030\114\001" +
    "\002\000\016\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\025\uffed\001\002\000\016\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\025\uffee\001\002\000\010\006\067\016\065" +
    "\017\066\001\002\000\004\030\063\001\002\000\016\011" +
    "\027\012\026\013\020\014\024\015\023\025\062\001\002" +
    "\000\004\030\033\001\002\000\004\030\031\001\002\000" +
    "\016\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\025\uffec" +
    "\001\002\000\004\023\032\001\002\000\016\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\025\uffeb\001\002\000\020" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\024\034\025" +
    "\uffe6\001\002\000\010\006\uffe4\017\uffe4\025\uffe4\001\002" +
    "\000\016\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\025" +
    "\uffe9\001\002\000\010\006\043\017\041\025\042\001\002" +
    "\000\010\006\uffe3\017\uffe3\025\uffe3\001\002\000\010\006" +
    "\uffe5\017\uffe5\025\uffe5\001\002\000\004\022\052\001\002" +
    "\000\016\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\025" +
    "\uffe7\001\002\000\004\030\044\001\002\000\004\022\045" +
    "\001\002\000\006\030\046\032\047\001\002\000\004\023" +
    "\051\001\002\000\004\023\050\001\002\000\012\005\ufff8" +
    "\006\ufff8\017\ufff8\025\ufff8\001\002\000\012\005\ufff9\006" +
    "\ufff9\017\ufff9\025\ufff9\001\002\000\010\030\054\031\053" +
    "\032\055\001\002\000\004\023\060\001\002\000\004\023" +
    "\057\001\002\000\004\023\056\001\002\000\010\006\uffe0" +
    "\017\uffe0\025\uffe0\001\002\000\010\006\uffe2\017\uffe2\025" +
    "\uffe2\001\002\000\010\006\uffe1\017\uffe1\025\uffe1\001\002" +
    "\000\016\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\025" +
    "\uffef\001\002\000\006\002\ufff0\010\ufff0\001\002\000\004" +
    "\023\064\001\002\000\016\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\025\uffea\001\002\000\006\021\102\022\103" +
    "\001\002\000\004\020\077\001\002\000\004\030\070\001" +
    "\002\000\006\020\071\022\072\001\002\000\004\030\075" +
    "\001\002\000\004\030\073\001\002\000\004\023\074\001" +
    "\002\000\016\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\025\uffdc\001\002\000\004\023\076\001\002\000\016\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\025\uffdb\001\002" +
    "\000\004\030\100\001\002\000\004\023\101\001\002\000" +
    "\016\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\025\uffda" +
    "\001\002\000\004\032\110\001\002\000\006\030\104\032" +
    "\105\001\002\000\004\023\107\001\002\000\004\023\106" +
    "\001\002\000\016\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\025\uffdf\001\002\000\016\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\025\uffdd\001\002\000\004\026\111\001" +
    "\002\000\004\032\112\001\002\000\004\023\113\001\002" +
    "\000\016\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\025" +
    "\uffde\001\002\000\020\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\024\034\025\uffe6\001\002\000\016\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\025\uffe8\001\002\000\004" +
    "\022\117\001\002\000\006\030\120\032\121\001\002\000" +
    "\004\023\ufff4\001\002\000\004\023\ufff3\001\002\000\004" +
    "\023\123\001\002\000\010\002\ufff5\007\ufff5\010\ufff5\001" +
    "\002\000\004\002\001\001\002\000\010\005\ufffa\006\ufffa" +
    "\025\ufffa\001\002\000\010\005\131\006\043\025\130\001" +
    "\002\000\010\005\ufffb\006\ufffb\025\ufffb\001\002\000\010" +
    "\002\ufffe\007\ufffe\010\ufffe\001\002\000\004\022\132\001" +
    "\002\000\004\030\133\001\002\000\004\023\134\001\002" +
    "\000\010\005\ufffc\006\ufffc\025\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\006\001\001\000\010" +
    "\006\012\012\010\016\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\024\014\021\017\020\021\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\060\017\020\021\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\034" +
    "\001\001\000\004\010\035\001\001\000\002\001\001\000" +
    "\006\015\037\020\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\125\001\001\000" +
    "\004\020\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Error tracking constants
    private int errorCount = 0;
    private static final int MAX_ERRORS = 10;
    private static final String ERROR_BORDER = "=".repeat(50);
    private static final String ERROR_TITLE = "*** XZU SYNTAX ERROR ***";
    private static final String FATAL_ERROR_TITLE = "*** FATAL ERROR: Too many syntax errors ***";
    private static final String UNRECOVERABLE_ERROR_TITLE = "*** FATAL ERROR: Cannot recover from syntax errors ***";

    public void syntax_error(Symbol cur_token) {
        if (++errorCount > MAX_ERRORS) {
            System.err.println(FATAL_ERROR_TITLE);
            System.err.println("Too many syntax errors encountered. Stopping compilation.");
            return;
        }
        
        printErrorHeader(cur_token);
        printErrorDetails(cur_token);
        printQuickFixGuide();
    }
    
    private void printErrorHeader(Symbol token) {
        int line = token.left >= 0 ? token.left : -1;
        System.err.println("\n" + ERROR_BORDER);
        System.err.println(ERROR_TITLE);
        System.err.println(ERROR_BORDER);
        System.err.println("Location: Line " + (line >= 0 ? line : "EOF"));
    }
    
    private void printErrorDetails(Symbol token) {
        String hint = getDetailedError(token);
        System.err.println("Problem: " + hint);
    }
    
    private void printQuickFixGuide() {
        System.err.println("\nQuick Fix Guide:");
        System.err.println("  - Variable names: start with letter (a-z, A-Z) or underscore (_)");
        System.err.println("  - Don't forget semicolons (;) after simple statements (GET, DELETE, let, expect)");
        System.err.println("  - NO semicolons after blocks (config { }, test { }, POST { }, PUT { })");
        System.err.println("  - Make sure all braces { } are properly closed");
        System.err.println("  - Check that strings are properly quoted with \"");
        System.err.println(ERROR_BORDER + "\n");
    }

    public void report_error(String message, Object info) {
        // Handled in syntax_error
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        System.err.println(FATAL_ERROR_TITLE);
        throw new Exception("Fatal parse error");
    }
    
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        System.err.println(UNRECOVERABLE_ERROR_TITLE);
        throw new Exception("Unrecoverable syntax error");
    }
    
    private String getDetailedError(Symbol token) {
        if (token == null || token.value == null) {
            return "Unexpected end of file - missing '}' or ';'?\n   -> Check for missing semicolons after simple statements (GET, DELETE, let, expect)\n   -> NO semicolons after blocks (config { }, test { }, POST { }, PUT { })";
        }
        
        String tokenVal = token.value.toString();
        
        // Check token type and provide specific guidance
        switch (token.sym) {
            case sym.NUMBER:
                // Check if this looks like a variable declaration error
                // If we see a number right after 'let', it's likely a variable name error
                return "Expected IDENTIFIER after 'let'\n   -> Identifiers cannot start with a digit '" + tokenVal + "'\n   -> Try: let var" + tokenVal + " = ...\n   -> Or: let user" + tokenVal + " = ...";
                
            case sym.IDENTIFIER:
                String id = tokenVal;
                
                // Check if identifier starts with digit
                if (id.matches("^[0-9].*")) {
                    return "Expected IDENTIFIER after 'let'\n   -> Identifiers cannot start with a digit '" + id + "'\n   -> Try: let var_" + id + " = ...";
                }
                
                // Check for missing expect keyword
                if ("status".equals(id)) {
                    return "Missing 'expect' keyword before 'status'\n   -> Try: expect status = 200;";
                }
                if ("body".equals(id)) {
                    return "Missing 'expect' keyword before 'body'\n   -> Try: expect body contains \"text\";";
                }
                if ("header".equals(id)) {
                    return "Missing 'expect' keyword before 'header'\n   -> Try: expect header \"Key\" = \"value\";";
                }
                
                return "Unexpected identifier '" + id + "'\n   -> Check for missing semicolon or keyword";
                
            case sym.STRING:
                return "Expected STRING after '='\n   -> Strings must be part of a valid statement\n   -> Try: GET " + tokenVal + "; or let x = " + tokenVal + ";";
                
            case sym.SEMICOLON:
                return "Unexpected semicolon after block\n   -> NO semicolons after blocks (config { }, test { }, POST { }, PUT { })\n   -> Remove the semicolon after the closing brace '}'";
                
            case sym.LBRACE:
                return "Unexpected '{'\n   -> Must follow: config, test Name, or POST/PUT path\n   -> Example: test MyTest { ... }";
                
            case sym.RBRACE:
                return "Unexpected '}'\n   -> Check for missing semicolons inside the block";
                
            case sym.EQUALS:
                return "Unexpected '='\n   -> Must follow: let name, base_url, body, header \"key\"\n   -> Example: let x = \"value\";";
                
            case sym.STATUS:
                return "Expected 'expect' before 'status'\n   -> Try: expect status = 200;";
                
            case sym.BODY:
                return "Missing 'expect' or '=' before 'body'\n   -> Request: body = \"...\";  OR  Assertion: expect body contains \"...\";";
                
            case sym.HEADER:
                return "Expected STRING after 'header'\n   -> Format: header \"Content-Type\" = \"application/json\";";
                
            case sym.CONTAINS:
                return "Missing 'expect' before 'contains'\n   -> Try: expect body contains \"text\";";
                
            default:
                return "Unexpected token '" + tokenVal + "'\n   -> Check syntax near this location";
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= config_opt variables tests 
            {
              ProgramNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ConfigNode c = (ConfigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List v = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List t = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        ProgramNode prog = new ProgramNode();
        if (c != null) prog.setConfig(c);
        for (Object var : v) prog.addVariable((VariableNode) var);
        for (Object test : t) prog.addTest((TestNode) test);
        RESULT = prog;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= config_opt variables 
            {
              ProgramNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConfigNode c = (ConfigNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List v = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("ERROR: Missing test blocks\n   -> Every file must have at least one test block");
        RESULT = new ProgramNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // config_opt ::= CONFIG LBRACE config_items RBRACE 
            {
              ConfigNode RESULT =null;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List items = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        ConfigNode config = new ConfigNode();
        for (Object item : items) {
            if (item instanceof String) config.setBaseUrl((String) item);
            else if (item instanceof HeaderNode) config.addHeader((HeaderNode) item);
        }
        RESULT = config;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_opt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // config_opt ::= 
            {
              ConfigNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_opt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // config_items ::= config_items BASE_URL EQUALS STRING SEMICOLON 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int urlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 list.add(url); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_items",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // config_items ::= config_items header_decl 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HeaderNode h = (HeaderNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(h); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_items",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // config_items ::= 
            {
              List RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("config_items",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header_decl ::= HEADER STRING EQUALS STRING SEMICOLON 
            {
              HeaderNode RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new HeaderNode(key, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_decl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header_decl ::= HEADER STRING EQUALS NUMBER SEMICOLON 
            {
              HeaderNode RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("ERROR Line " + keyleft + ": Expected STRING after 'header \"" + key + "\" ='\n   -> Header values must be strings, not numbers\n   -> Found: " + val + "\n   -> Fix: header \"" + key + "\" = \"" + val + "\";");
        RESULT = new HeaderNode(key, val.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_decl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variables ::= variables variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VariableNode v = (VariableNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(v); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables ::= 
            {
              List RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable ::= LET IDENTIFIER EQUALS value SEMICOLON 
            {
              VariableNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VariableNode(name, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // value ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tests ::= tests test_block 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TestNode t = (TestNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(t); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tests",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tests ::= test_block 
            {
              List RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TestNode t = (TestNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        List list = new ArrayList(); 
        list.add(t); 
        RESULT = list; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tests",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // test_block ::= TEST IDENTIFIER LBRACE test_statements RBRACE 
            {
              TestNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List stmts = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        TestNode test = new TestNode(name);
        int requestCount = 0;
        int assertionCount = 0;
        
        for (Object stmt : stmts) {
            if (stmt instanceof RequestNode) {
                test.addRequest((RequestNode) stmt);
                requestCount++;
            }
            else if (stmt instanceof AssertionNode) {
                test.addAssertion((AssertionNode) stmt);
                assertionCount++;
            }
        }
        
        if (requestCount == 0) {
            System.err.println("WARNING: Test '" + name + "' has no HTTP requests");
        }
        if (assertionCount < 2) {
            System.err.println("WARNING: Test '" + name + "' needs at least 2 assertions (found " + assertionCount + ")");
        }
        
        RESULT = test;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_block",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // test_statements ::= test_statements test_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(stmt); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_statements",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // test_statements ::= test_statement 
            {
              List RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        List list = new ArrayList(); 
        list.add(stmt); 
        RESULT = list; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_statements",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // test_statement ::= request 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RequestNode r = (RequestNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // test_statement ::= assertion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssertionNode a = (AssertionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("test_statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // request ::= GET STRING SEMICOLON 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RequestNode(RequestNode.HttpMethod.GET, path); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // request ::= DELETE STRING SEMICOLON 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RequestNode(RequestNode.HttpMethod.DELETE, path); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // request ::= POST STRING request_block_opt 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List items = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RequestNode req = new RequestNode(RequestNode.HttpMethod.POST, path);
        for (Object item : items) {
            if (item instanceof HeaderNode) req.addHeader((HeaderNode) item);
            else if (item instanceof String) req.setBody((String) item);
        }
        RESULT = req;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // request ::= PUT STRING request_block_opt 
            {
              RequestNode RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List items = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RequestNode req = new RequestNode(RequestNode.HttpMethod.PUT, path);
        for (Object item : items) {
            if (item instanceof HeaderNode) req.addHeader((HeaderNode) item);
            else if (item instanceof String) req.setBody((String) item);
        }
        RESULT = req;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // request_block_opt ::= LBRACE request_items RBRACE 
            {
              List RESULT =null;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List items = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = items; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_block_opt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // request_block_opt ::= 
            {
              List RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_block_opt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // request_items ::= request_items request_item 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(item); RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_items",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // request_items ::= 
            {
              List RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_items",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // request_item ::= header_decl 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HeaderNode h = (HeaderNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = h; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_item",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // request_item ::= BODY EQUALS STRING SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_item",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // request_item ::= BODY EQUALS MULTILINE_STRING SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_item",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // request_item ::= BODY EQUALS NUMBER SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("ERROR Line " + nleft + ": Expected STRING after 'body ='\n   -> Body must be a string, not a number\n   -> Found: " + n + "\n   -> Fix: body = \"" + n + "\";");
        RESULT = n.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("request_item",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assertion ::= EXPECT STATUS EQUALS NUMBER SEMICOLON 
            {
              AssertionNode RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer code = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssertionNode(AssertionNode.AssertionType.STATUS, code); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assertion ::= EXPECT STATUS IN NUMBER RANGE NUMBER SEMICOLON 
            {
              AssertionNode RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer min = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer max = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssertionNode(AssertionNode.AssertionType.STATUS_RANGE, min, max); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assertion ::= EXPECT STATUS EQUALS STRING SEMICOLON 
            {
              AssertionNode RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("ERROR Line " + codeleft + ": Expected NUMBER for status\n   -> Status must be an integer, not a string\n   -> Found: \"" + code + "\"\n   -> Fix: expect status = " + code + ";");
        try {
            RESULT = new AssertionNode(AssertionNode.AssertionType.STATUS, Integer.parseInt(code));
        } catch (NumberFormatException e) {
            RESULT = new AssertionNode(AssertionNode.AssertionType.STATUS, 200);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assertion ::= EXPECT HEADER STRING EQUALS STRING SEMICOLON 
            {
              AssertionNode RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssertionNode(AssertionNode.AssertionType.HEADER_EQUALS, key, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assertion ::= EXPECT HEADER STRING CONTAINS STRING SEMICOLON 
            {
              AssertionNode RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssertionNode(AssertionNode.AssertionType.HEADER_CONTAINS, key, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assertion ::= EXPECT BODY CONTAINS STRING SEMICOLON 
            {
              AssertionNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssertionNode(AssertionNode.AssertionType.BODY_CONTAINS, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

